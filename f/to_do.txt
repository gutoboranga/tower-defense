- Priorizar o uso de elementos imutáveis e funções puras (por exemplo, sempre precisar manipular listas, criar uma nova e não modificar a original, seja por recursão ou através de funções de ordem maior). [DONE]

// Fizemos isto na manipulação de listas. ex.:
No item recursão, abaixo, está o trecho de código completo, mas aqui mostramos que enviamos como parametro pra chamada recursiva um novo array, criado a partir do array atual, mas retirando o primeiro elemento.
```
self.spawnEnemy(Array(enemies.dropFirst()))
```



- Especificar e usar funções não nomeadas (ou lambda).
// alguns métodos recebem como parametro uma funcao a ser executada após alguma instrução a ser feita

// declaração da funcao com completion
func loseLife(with damage:Double, completion: () ->()) {
    lifeBar.loseLife(with: damage) {
        completion()
    }
}

// chamada da funcao passando uma funcao anonima como parametro
castle.loseLife(with: enemy.getDamageValue(), completion: {
    self.removeFromParent()
    self.gameDelegate?.endOfGame(won: false, score: self.score)



- Especificar e usar funções que usem currying.



- Especificar funções que utilizem pattern matching ao máximo, na sua definição. [DONE]
// value-binding pattern:
switch button.name! {
    case "speed":
        tower = SpeedTower(size: ground.size, position: ground.position)
    case "damage":
        tower = DamageTower(size: ground.size, position: ground.position)
    case "range":
        tower = RangeTower(size: ground.size, position: ground.position)
    default:
        tower = DoubleShotTower(size: ground.size, position: ground.position)
    }
}

#TODO: trocar ground;position por p
#TODO: ground.size por s

// vários enums com cases
enum ObjectFaceOrientation : Float {
    case right = 270.0
    case left  = 90.0
    case up   = 0.0
    case down = 180.0
    ...


var title : String {
        switch self {
        case .won:
            return "You won!"
        default:
            return "Game over"
        }
    }


- Especificar e usar funções de ordem superior (maior) criadas pelo programador.



- Usar funções de ordem maior prontas (p.ex., map, reduce, foldr/foldl ou similares).
// reduce passando adiante um booleano:
// confere se já há um torre no ponto clicado pelo jogador
let foundTower = towers.reduce(false, { (hasFoundTowerYet, tower) -> Bool in
    if let t = tower as? Tower {
        if t.contains(point) {
            t.mouseDown(with: event)
            return hasFoundTowerYet || true
        }
    }
    return hasFoundTowerYet || false
})

// filter pra pegar lista de nodos que são labels
let labelNodes = nodes.filter({
    return $0.isMember(of: SKLabelNode.self)
})

#TODO: trocar nodes por allNodes

- Especificar e usar funções como elementos de 1ª ordem. [DONE]
// função nodeIsClickable, recebe um SKNode e retorna um Bool. Serve como um filtro pra saber se será necessário tratar o clique do usuário (se clicou em um nodo - elemento visual do framework - que desencadeia uma ação) ou se foi um clique sem consequências.

// declaração
func nodeIsClickable(node: SKNode) -> Bool {
    return node == self.newGameLabel! ||
           node == self.quitLabel! ||
           node == self.mainMenuLabel!
}
    
// uso com o método first(where: f), que recebe uma função do tipo (SKNode) -> (Bool) como parâmetro e retorna o primeiro elemento que satisfizer a condição da funcao recebida (aka, quando a função retornar true). Aqui referenciamos nossa funcao definida acima.
let labelToSelect = labelNodes.first(where: nodeIsClickable)


\\func spawnEnemy(\_ enemies: [Int]) \{
\\\tab self.enemiesToSpawn -= 1
    
\\\tab if let enemyType = enemies.first \{
\\\tab\tab run(SKAction.wait(forDuration: enemiesDelay), completion: \{
\\\tab\tab\tab self.handleEnemyTypes(type: enemyType)
\\\tab\tab\tab self.spawnEnemy(Array(enemies.dropFirst()))
\\\tab\tab \})
\\\tab \}


- Usar recursão como mecanismo de iteração (pelo menos em funções de ordem superior que manipulem listas). [DONE]
// spawn: funcao recursiva
func spawnEnemy(_ enemies: [Int]) {
    self.enemiesToSpawn -= 1
    
    if let enemyType = enemies.first {
        run(SKAction.wait(forDuration: enemiesDelay), completion: {
            self.handleEnemyTypes(type: enemyType)
            self.spawnEnemy(Array(enemies.dropFirst()))
        })
    }
}
